// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Header /> render correctly 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(App)>
    <App
      bootApp={[Function]}
    >
      <div
        className="container"
      >
        <Connect(Header)>
          <Header
            dispatch={[Function]}
            title="Schedules"
          >
            <div
              className="container"
            >
              <h2
                className="title"
              >
                Schedules
              </h2>
              <ForwardRef(DehazeIcon)>
                <WithStyles(ForwardRef(SvgIcon))>
                  <ForwardRef(SvgIcon)
                    classes={
                      Object {
                        "colorAction": "MuiSvgIcon-colorAction",
                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                        "colorError": "MuiSvgIcon-colorError",
                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                        "root": "MuiSvgIcon-root",
                      }
                    }
                  >
                    <svg
                      aria-hidden={true}
                      className="MuiSvgIcon-root"
                      focusable="false"
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z"
                      />
                    </svg>
                  </ForwardRef(SvgIcon)>
                </WithStyles(ForwardRef(SvgIcon))>
              </ForwardRef(DehazeIcon)>
            </div>
          </Header>
        </Connect(Header)>
        <div
          className="content"
        >
          <Connect(Schedules)>
            <Schedules
              fetchSchedules={[Function]}
              schedules={Array []}
              status={0}
              texts={
                Object {
                  "buttonRetireText": "Retire",
                  "buttonRetryText": "Retry",
                  "buttonUnretireText": "Unretire",
                  "emptyMessageText": "No schedules available.",
                  "errorMessageText": "Something went wrong ...",
                }
              }
            >
              <div
                className="container"
              >
                <div
                  className="loading"
                >
                  <Loading
                    color="#000000"
                    delay={0}
                    height={50}
                    type="spin"
                    width={50}
                  >
                    <div
                      dangerouslySetInnerHTML={
                        Object {
                          "__html": "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 32 32\\">
  <path opacity=\\".25\\" d=\\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\\"/>
  <path d=\\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\\">
    <animateTransform attributeName=\\"transform\\" type=\\"rotate\\" from=\\"0 16 16\\" to=\\"360 16 16\\" dur=\\"0.8s\\" repeatCount=\\"indefinite\\" />
  </path>
</svg>
",
                        }
                      }
                      style={
                        Object {
                          "fill": "#000000",
                          "height": 50,
                          "width": 50,
                        }
                      }
                    />
                  </Loading>
                </div>
              </div>
            </Schedules>
          </Connect(Schedules)>
          <Connect(ScheduleLogs)>
            <ScheduleLogs
              dispatch={[Function]}
              logs={Array []}
              status={0}
            >
              <div>
                <div>
                  <Loading
                    color="#000000"
                    delay={0}
                    height={50}
                    type="spin"
                    width={50}
                  >
                    <div
                      dangerouslySetInnerHTML={
                        Object {
                          "__html": "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 32 32\\">
  <path opacity=\\".25\\" d=\\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\\"/>
  <path d=\\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\\">
    <animateTransform attributeName=\\"transform\\" type=\\"rotate\\" from=\\"0 16 16\\" to=\\"360 16 16\\" dur=\\"0.8s\\" repeatCount=\\"indefinite\\" />
  </path>
</svg>
",
                        }
                      }
                      style={
                        Object {
                          "fill": "#000000",
                          "height": 50,
                          "width": 50,
                        }
                      }
                    />
                  </Loading>
                </div>
              </div>
            </ScheduleLogs>
          </Connect(ScheduleLogs)>
        </div>
      </div>
    </App>
  </Connect(App)>
</Provider>
`;
