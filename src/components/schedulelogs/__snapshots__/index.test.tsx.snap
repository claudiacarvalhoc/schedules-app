// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ScheduleLogs /> render correctly schedule is not selected logs has an array data and data was saved sucessfully 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ScheduleLogs)>
    <ScheduleLogs
      fetchScheduleLogs={[Function]}
      isSelected={false}
      logs={false}
      resetSelectedSchedule={[Function]}
      scheduleName={false}
      status={1}
      texts={
        Object {
          "buttonRetryText": "Retry",
          "emptyMessageText": "No schedules logs available.",
          "errorMessageText": "Something went wrong ...",
          "noSelectedScheduleText": "Please select a schedule.",
        }
      }
    >
      <div
        className="noinfo"
        data-test="schedulelogs_no_selected_schedule"
      >
        <p>
          Please select a schedule.
        </p>
      </div>
    </ScheduleLogs>
  </Connect(ScheduleLogs)>
</Provider>
`;

exports[`<ScheduleLogs /> render correctly when schedule logs couldn't be fetched and data was saved as failure 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ScheduleLogs)>
    <ScheduleLogs
      fetchScheduleLogs={[Function]}
      isSelected={true}
      logs={Array []}
      resetSelectedSchedule={[Function]}
      scheduleName="Random Schedule Name (0.7243723999446063)"
      status={2}
      texts={
        Object {
          "buttonRetryText": "Retry",
          "emptyMessageText": "No schedules logs available.",
          "errorMessageText": "Something went wrong ...",
          "noSelectedScheduleText": "Please select a schedule.",
        }
      }
    >
      <div
        className="overlay"
        onClick={[Function]}
      />
      <div
        className="schedulelogs"
      >
        <WithStyles(ForwardRef(Typography))
          className="modalTitle"
          variant="h6"
        >
          <ForwardRef(Typography)
            className="modalTitle"
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            variant="h6"
          >
            <h6
              className="MuiTypography-root modalTitle MuiTypography-h6"
            >
              Random Schedule Name (0.7243723999446063)
            </h6>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
        <div
          className="failure"
          data-test="schedulelogs_load_failure_message"
        >
          <WithStyles(ForwardRef(Typography))
            className="failureTitle"
            component="p"
            variant="body2"
          >
            <ForwardRef(Typography)
              className="failureTitle"
              classes={
                Object {
                  "alignCenter": "MuiTypography-alignCenter",
                  "alignJustify": "MuiTypography-alignJustify",
                  "alignLeft": "MuiTypography-alignLeft",
                  "alignRight": "MuiTypography-alignRight",
                  "body1": "MuiTypography-body1",
                  "body2": "MuiTypography-body2",
                  "button": "MuiTypography-button",
                  "caption": "MuiTypography-caption",
                  "colorError": "MuiTypography-colorError",
                  "colorInherit": "MuiTypography-colorInherit",
                  "colorPrimary": "MuiTypography-colorPrimary",
                  "colorSecondary": "MuiTypography-colorSecondary",
                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                  "displayBlock": "MuiTypography-displayBlock",
                  "displayInline": "MuiTypography-displayInline",
                  "gutterBottom": "MuiTypography-gutterBottom",
                  "h1": "MuiTypography-h1",
                  "h2": "MuiTypography-h2",
                  "h3": "MuiTypography-h3",
                  "h4": "MuiTypography-h4",
                  "h5": "MuiTypography-h5",
                  "h6": "MuiTypography-h6",
                  "noWrap": "MuiTypography-noWrap",
                  "overline": "MuiTypography-overline",
                  "paragraph": "MuiTypography-paragraph",
                  "root": "MuiTypography-root",
                  "srOnly": "MuiTypography-srOnly",
                  "subtitle1": "MuiTypography-subtitle1",
                  "subtitle2": "MuiTypography-subtitle2",
                }
              }
              component="p"
              variant="body2"
            >
              <p
                className="MuiTypography-root failureTitle MuiTypography-body2"
              >
                Something went wrong ...
              </p>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
          <WithStyles(ForwardRef(Button))
            className="retryButton"
            color="primary"
            disableElevation={true}
            onClick={[Function]}
            variant="contained"
          >
            <ForwardRef(Button)
              className="retryButton"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disableElevation={true}
              onClick={[Function]}
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-contained retryButton MuiButton-containedPrimary MuiButton-disableElevation"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-contained retryButton MuiButton-containedPrimary MuiButton-disableElevation"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-contained retryButton MuiButton-containedPrimary MuiButton-disableElevation"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Retry
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </div>
      </div>
    </ScheduleLogs>
  </Connect(ScheduleLogs)>
</Provider>
`;

exports[`<ScheduleLogs /> render correctly when schedule logs has an array data and data was saved sucessfully 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ScheduleLogs)>
    <ScheduleLogs
      fetchScheduleLogs={[Function]}
      isSelected={true}
      logs={
        Array [
          Object {
            "endTime": 2021-07-12T23:43:39.395Z,
            "id": 1193520,
            "scheduleId": 23802893,
            "serverName": "esse ad deserunt",
            "startTime": 2021-12-18T06:35:09.604Z,
            "status": 4,
          },
        ]
      }
      resetSelectedSchedule={[Function]}
      scheduleName="Random Schedule Name (0.7243723999446063)"
      status={1}
      texts={
        Object {
          "buttonRetryText": "Retry",
          "emptyMessageText": "No schedules logs available.",
          "errorMessageText": "Something went wrong ...",
          "noSelectedScheduleText": "Please select a schedule.",
        }
      }
    >
      <div
        className="overlay"
        onClick={[Function]}
      />
      <div
        className="schedulelogs"
      >
        <WithStyles(ForwardRef(Typography))
          className="modalTitle"
          variant="h6"
        >
          <ForwardRef(Typography)
            className="modalTitle"
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            variant="h6"
          >
            <h6
              className="MuiTypography-root modalTitle MuiTypography-h6"
            >
              Random Schedule Name (0.7243723999446063)
            </h6>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
        <div
          className="items"
          data-test="schedulelogs_load_items"
        >
          <Connect(LogItem)
            item={
              Object {
                "endTime": 2021-07-12T23:43:39.395Z,
                "id": 1193520,
                "scheduleId": 23802893,
                "serverName": "esse ad deserunt",
                "startTime": 2021-12-18T06:35:09.604Z,
                "status": 4,
              }
            }
            key="1193520"
          >
            <LogItem
              dispatch={[Function]}
              item={
                Object {
                  "endTime": 2021-07-12T23:43:39.395Z,
                  "id": 1193520,
                  "scheduleId": 23802893,
                  "serverName": "esse ad deserunt",
                  "startTime": 2021-12-18T06:35:09.604Z,
                  "status": 4,
                }
              }
              texts={
                Object {
                  "labelEndTime": "End",
                  "labelStartTime": "Start",
                }
              }
            >
              <WithStyles(ForwardRef(Card))
                className="logs"
                variant="outlined"
              >
                <ForwardRef(Card)
                  className="logs"
                  classes={
                    Object {
                      "root": "MuiCard-root",
                    }
                  }
                  variant="outlined"
                >
                  <WithStyles(ForwardRef(Paper))
                    className="MuiCard-root logs"
                    elevation={1}
                    variant="outlined"
                  >
                    <ForwardRef(Paper)
                      className="MuiCard-root logs"
                      classes={
                        Object {
                          "elevation0": "MuiPaper-elevation0",
                          "elevation1": "MuiPaper-elevation1",
                          "elevation10": "MuiPaper-elevation10",
                          "elevation11": "MuiPaper-elevation11",
                          "elevation12": "MuiPaper-elevation12",
                          "elevation13": "MuiPaper-elevation13",
                          "elevation14": "MuiPaper-elevation14",
                          "elevation15": "MuiPaper-elevation15",
                          "elevation16": "MuiPaper-elevation16",
                          "elevation17": "MuiPaper-elevation17",
                          "elevation18": "MuiPaper-elevation18",
                          "elevation19": "MuiPaper-elevation19",
                          "elevation2": "MuiPaper-elevation2",
                          "elevation20": "MuiPaper-elevation20",
                          "elevation21": "MuiPaper-elevation21",
                          "elevation22": "MuiPaper-elevation22",
                          "elevation23": "MuiPaper-elevation23",
                          "elevation24": "MuiPaper-elevation24",
                          "elevation3": "MuiPaper-elevation3",
                          "elevation4": "MuiPaper-elevation4",
                          "elevation5": "MuiPaper-elevation5",
                          "elevation6": "MuiPaper-elevation6",
                          "elevation7": "MuiPaper-elevation7",
                          "elevation8": "MuiPaper-elevation8",
                          "elevation9": "MuiPaper-elevation9",
                          "outlined": "MuiPaper-outlined",
                          "root": "MuiPaper-root",
                          "rounded": "MuiPaper-rounded",
                        }
                      }
                      elevation={1}
                      variant="outlined"
                    >
                      <div
                        className="MuiPaper-root MuiCard-root logs MuiPaper-outlined MuiPaper-rounded"
                      >
                        <WithStyles(ForwardRef(CardContent))
                          className="content"
                        >
                          <ForwardRef(CardContent)
                            className="content"
                            classes={
                              Object {
                                "root": "MuiCardContent-root",
                              }
                            }
                          >
                            <div
                              className="MuiCardContent-root content"
                            >
                              <div
                                className="header"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  className="title"
                                  color="primary"
                                  gutterBottom={true}
                                  noWrap={true}
                                >
                                  <ForwardRef(Typography)
                                    className="title"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="primary"
                                    gutterBottom={true}
                                    noWrap={true}
                                  >
                                    <p
                                      className="MuiTypography-root title MuiTypography-body1 MuiTypography-colorPrimary MuiTypography-noWrap MuiTypography-gutterBottom"
                                    >
                                      esse ad deserunt
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                                <WithStyles(ForwardRef(Chip))
                                  label={4}
                                  size="small"
                                >
                                  <ForwardRef(Chip)
                                    classes={
                                      Object {
                                        "avatar": "MuiChip-avatar",
                                        "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                        "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                        "avatarSmall": "MuiChip-avatarSmall",
                                        "clickable": "MuiChip-clickable",
                                        "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                        "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                        "colorPrimary": "MuiChip-colorPrimary",
                                        "colorSecondary": "MuiChip-colorSecondary",
                                        "deletable": "MuiChip-deletable",
                                        "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                        "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                        "deleteIcon": "MuiChip-deleteIcon",
                                        "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                        "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                        "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                        "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                        "deleteIconSmall": "MuiChip-deleteIconSmall",
                                        "disabled": "Mui-disabled",
                                        "icon": "MuiChip-icon",
                                        "iconColorPrimary": "MuiChip-iconColorPrimary",
                                        "iconColorSecondary": "MuiChip-iconColorSecondary",
                                        "iconSmall": "MuiChip-iconSmall",
                                        "label": "MuiChip-label",
                                        "labelSmall": "MuiChip-labelSmall",
                                        "outlined": "MuiChip-outlined",
                                        "outlinedPrimary": "MuiChip-outlinedPrimary",
                                        "outlinedSecondary": "MuiChip-outlinedSecondary",
                                        "root": "MuiChip-root",
                                        "sizeSmall": "MuiChip-sizeSmall",
                                      }
                                    }
                                    label={4}
                                    size="small"
                                  >
                                    <div
                                      className="MuiChip-root MuiChip-sizeSmall"
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                    >
                                      <span
                                        className="MuiChip-label MuiChip-labelSmall"
                                      >
                                        4
                                      </span>
                                    </div>
                                  </ForwardRef(Chip)>
                                </WithStyles(ForwardRef(Chip))>
                              </div>
                              <div
                                className="times"
                              >
                                <Time
                                  label="Start"
                                  time="December 18 2021"
                                >
                                  <div>
                                    <WithStyles(ForwardRef(Typography))
                                      className="label"
                                      gutterBottom={true}
                                      variant="overline"
                                    >
                                      <ForwardRef(Typography)
                                        className="label"
                                        classes={
                                          Object {
                                            "alignCenter": "MuiTypography-alignCenter",
                                            "alignJustify": "MuiTypography-alignJustify",
                                            "alignLeft": "MuiTypography-alignLeft",
                                            "alignRight": "MuiTypography-alignRight",
                                            "body1": "MuiTypography-body1",
                                            "body2": "MuiTypography-body2",
                                            "button": "MuiTypography-button",
                                            "caption": "MuiTypography-caption",
                                            "colorError": "MuiTypography-colorError",
                                            "colorInherit": "MuiTypography-colorInherit",
                                            "colorPrimary": "MuiTypography-colorPrimary",
                                            "colorSecondary": "MuiTypography-colorSecondary",
                                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                            "displayBlock": "MuiTypography-displayBlock",
                                            "displayInline": "MuiTypography-displayInline",
                                            "gutterBottom": "MuiTypography-gutterBottom",
                                            "h1": "MuiTypography-h1",
                                            "h2": "MuiTypography-h2",
                                            "h3": "MuiTypography-h3",
                                            "h4": "MuiTypography-h4",
                                            "h5": "MuiTypography-h5",
                                            "h6": "MuiTypography-h6",
                                            "noWrap": "MuiTypography-noWrap",
                                            "overline": "MuiTypography-overline",
                                            "paragraph": "MuiTypography-paragraph",
                                            "root": "MuiTypography-root",
                                            "srOnly": "MuiTypography-srOnly",
                                            "subtitle1": "MuiTypography-subtitle1",
                                            "subtitle2": "MuiTypography-subtitle2",
                                          }
                                        }
                                        gutterBottom={true}
                                        variant="overline"
                                      >
                                        <span
                                          className="MuiTypography-root label MuiTypography-overline MuiTypography-gutterBottom"
                                        >
                                          Start
                                        </span>
                                      </ForwardRef(Typography)>
                                    </WithStyles(ForwardRef(Typography))>
                                    <div>
                                      <WithStyles(ForwardRef(Chip))
                                        label="December 18 2021"
                                        size="small"
                                      >
                                        <ForwardRef(Chip)
                                          classes={
                                            Object {
                                              "avatar": "MuiChip-avatar",
                                              "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                              "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                              "avatarSmall": "MuiChip-avatarSmall",
                                              "clickable": "MuiChip-clickable",
                                              "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                              "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                              "colorPrimary": "MuiChip-colorPrimary",
                                              "colorSecondary": "MuiChip-colorSecondary",
                                              "deletable": "MuiChip-deletable",
                                              "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                              "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                              "deleteIcon": "MuiChip-deleteIcon",
                                              "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                              "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                              "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                              "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                              "deleteIconSmall": "MuiChip-deleteIconSmall",
                                              "disabled": "Mui-disabled",
                                              "icon": "MuiChip-icon",
                                              "iconColorPrimary": "MuiChip-iconColorPrimary",
                                              "iconColorSecondary": "MuiChip-iconColorSecondary",
                                              "iconSmall": "MuiChip-iconSmall",
                                              "label": "MuiChip-label",
                                              "labelSmall": "MuiChip-labelSmall",
                                              "outlined": "MuiChip-outlined",
                                              "outlinedPrimary": "MuiChip-outlinedPrimary",
                                              "outlinedSecondary": "MuiChip-outlinedSecondary",
                                              "root": "MuiChip-root",
                                              "sizeSmall": "MuiChip-sizeSmall",
                                            }
                                          }
                                          label="December 18 2021"
                                          size="small"
                                        >
                                          <div
                                            className="MuiChip-root MuiChip-sizeSmall"
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                          >
                                            <span
                                              className="MuiChip-label MuiChip-labelSmall"
                                            >
                                              December 18 2021
                                            </span>
                                          </div>
                                        </ForwardRef(Chip)>
                                      </WithStyles(ForwardRef(Chip))>
                                    </div>
                                  </div>
                                </Time>
                                <Time
                                  label="End"
                                  time="July 13 2021"
                                >
                                  <div>
                                    <WithStyles(ForwardRef(Typography))
                                      className="label"
                                      gutterBottom={true}
                                      variant="overline"
                                    >
                                      <ForwardRef(Typography)
                                        className="label"
                                        classes={
                                          Object {
                                            "alignCenter": "MuiTypography-alignCenter",
                                            "alignJustify": "MuiTypography-alignJustify",
                                            "alignLeft": "MuiTypography-alignLeft",
                                            "alignRight": "MuiTypography-alignRight",
                                            "body1": "MuiTypography-body1",
                                            "body2": "MuiTypography-body2",
                                            "button": "MuiTypography-button",
                                            "caption": "MuiTypography-caption",
                                            "colorError": "MuiTypography-colorError",
                                            "colorInherit": "MuiTypography-colorInherit",
                                            "colorPrimary": "MuiTypography-colorPrimary",
                                            "colorSecondary": "MuiTypography-colorSecondary",
                                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                            "displayBlock": "MuiTypography-displayBlock",
                                            "displayInline": "MuiTypography-displayInline",
                                            "gutterBottom": "MuiTypography-gutterBottom",
                                            "h1": "MuiTypography-h1",
                                            "h2": "MuiTypography-h2",
                                            "h3": "MuiTypography-h3",
                                            "h4": "MuiTypography-h4",
                                            "h5": "MuiTypography-h5",
                                            "h6": "MuiTypography-h6",
                                            "noWrap": "MuiTypography-noWrap",
                                            "overline": "MuiTypography-overline",
                                            "paragraph": "MuiTypography-paragraph",
                                            "root": "MuiTypography-root",
                                            "srOnly": "MuiTypography-srOnly",
                                            "subtitle1": "MuiTypography-subtitle1",
                                            "subtitle2": "MuiTypography-subtitle2",
                                          }
                                        }
                                        gutterBottom={true}
                                        variant="overline"
                                      >
                                        <span
                                          className="MuiTypography-root label MuiTypography-overline MuiTypography-gutterBottom"
                                        >
                                          End
                                        </span>
                                      </ForwardRef(Typography)>
                                    </WithStyles(ForwardRef(Typography))>
                                    <div>
                                      <WithStyles(ForwardRef(Chip))
                                        label="July 13 2021"
                                        size="small"
                                      >
                                        <ForwardRef(Chip)
                                          classes={
                                            Object {
                                              "avatar": "MuiChip-avatar",
                                              "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                              "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                              "avatarSmall": "MuiChip-avatarSmall",
                                              "clickable": "MuiChip-clickable",
                                              "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                              "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                              "colorPrimary": "MuiChip-colorPrimary",
                                              "colorSecondary": "MuiChip-colorSecondary",
                                              "deletable": "MuiChip-deletable",
                                              "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                              "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                              "deleteIcon": "MuiChip-deleteIcon",
                                              "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                              "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                              "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                              "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                              "deleteIconSmall": "MuiChip-deleteIconSmall",
                                              "disabled": "Mui-disabled",
                                              "icon": "MuiChip-icon",
                                              "iconColorPrimary": "MuiChip-iconColorPrimary",
                                              "iconColorSecondary": "MuiChip-iconColorSecondary",
                                              "iconSmall": "MuiChip-iconSmall",
                                              "label": "MuiChip-label",
                                              "labelSmall": "MuiChip-labelSmall",
                                              "outlined": "MuiChip-outlined",
                                              "outlinedPrimary": "MuiChip-outlinedPrimary",
                                              "outlinedSecondary": "MuiChip-outlinedSecondary",
                                              "root": "MuiChip-root",
                                              "sizeSmall": "MuiChip-sizeSmall",
                                            }
                                          }
                                          label="July 13 2021"
                                          size="small"
                                        >
                                          <div
                                            className="MuiChip-root MuiChip-sizeSmall"
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                          >
                                            <span
                                              className="MuiChip-label MuiChip-labelSmall"
                                            >
                                              July 13 2021
                                            </span>
                                          </div>
                                        </ForwardRef(Chip)>
                                      </WithStyles(ForwardRef(Chip))>
                                    </div>
                                  </div>
                                </Time>
                              </div>
                            </div>
                          </ForwardRef(CardContent)>
                        </WithStyles(ForwardRef(CardContent))>
                      </div>
                    </ForwardRef(Paper)>
                  </WithStyles(ForwardRef(Paper))>
                </ForwardRef(Card)>
              </WithStyles(ForwardRef(Card))>
            </LogItem>
          </Connect(LogItem)>
        </div>
      </div>
    </ScheduleLogs>
  </Connect(ScheduleLogs)>
</Provider>
`;

exports[`<ScheduleLogs /> render correctly when schedule logs is empty and data was saved sucessfully 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ScheduleLogs)>
    <ScheduleLogs
      fetchScheduleLogs={[Function]}
      isSelected={true}
      logs={Array []}
      resetSelectedSchedule={[Function]}
      scheduleName="Random Schedule Name (0.7243723999446063)"
      status={1}
      texts={
        Object {
          "buttonRetryText": "Retry",
          "emptyMessageText": "No schedules logs available.",
          "errorMessageText": "Something went wrong ...",
          "noSelectedScheduleText": "Please select a schedule.",
        }
      }
    >
      <div
        className="overlay"
        onClick={[Function]}
      />
      <div
        className="schedulelogs"
      >
        <WithStyles(ForwardRef(Typography))
          className="modalTitle"
          variant="h6"
        >
          <ForwardRef(Typography)
            className="modalTitle"
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            variant="h6"
          >
            <h6
              className="MuiTypography-root modalTitle MuiTypography-h6"
            >
              Random Schedule Name (0.7243723999446063)
            </h6>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
        <div
          className="emptySuccess"
          data-test="schedulelogs_load_empty_items"
        >
          <p>
            No schedules logs available.
          </p>
        </div>
      </div>
    </ScheduleLogs>
  </Connect(ScheduleLogs)>
</Provider>
`;

exports[`<ScheduleLogs /> render correctly when schedule logs is undefined and data was saved sucessfully 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ScheduleLogs)>
    <ScheduleLogs
      fetchScheduleLogs={[Function]}
      isSelected={true}
      logs={Array []}
      resetSelectedSchedule={[Function]}
      scheduleName="Random Schedule Name (0.7243723999446063)"
      status={1}
      texts={
        Object {
          "buttonRetryText": "Retry",
          "emptyMessageText": "No schedules logs available.",
          "errorMessageText": "Something went wrong ...",
          "noSelectedScheduleText": "Please select a schedule.",
        }
      }
    >
      <div
        className="overlay"
        onClick={[Function]}
      />
      <div
        className="schedulelogs"
      >
        <WithStyles(ForwardRef(Typography))
          className="modalTitle"
          variant="h6"
        >
          <ForwardRef(Typography)
            className="modalTitle"
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            variant="h6"
          >
            <h6
              className="MuiTypography-root modalTitle MuiTypography-h6"
            >
              Random Schedule Name (0.7243723999446063)
            </h6>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
        <div
          className="emptySuccess"
          data-test="schedulelogs_load_empty_items"
        >
          <p>
            No schedules logs available.
          </p>
        </div>
      </div>
    </ScheduleLogs>
  </Connect(ScheduleLogs)>
</Provider>
`;
