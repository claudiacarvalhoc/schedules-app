{"version":3,"sources":["redux/appState.ts","redux/initialState.ts","redux/types.ts","redux/reducers.ts","redux/app/reducer.ts","redux/store.ts","config.tsx","redux/app/actions.ts","redux/app/selectors.ts","components/profile/index.tsx","components/buttonaction/index.tsx","components/scheduleitem/index.tsx","components/schedules/index.tsx","components/time/index.tsx","components/logitem/index.tsx","components/schedulelogs/index.tsx","components/header/index.tsx","components/app/index.tsx","index.tsx","components/schedulelogs/schedulelogs.module.css","components/scheduleitem/scheduleitem.module.css","components/logitem/logitem.module.css","components/header/header.module.css","components/schedules/schedules.module.css","components/app/app.module.css","components/profile/profile.module.css","components/time/time.module.css"],"names":["StatusState","IntervalTypeState","LogStatusState","appInitialState","status","schedules","Loading","scheduleLogs","selectedScheduleId","undefined","visibleScheduleIds","texts","header","titleText","buttonRetireText","buttonUnretireText","errorMessageText","buttonRetryText","emptyMessageText","noSelectedScheduleText","log","labelStartTime","labelEndTime","avatarInitialState","letter","color","LOADING_SCHEDULES_STATUS","LOADING_SCHEDULELOGS_STATUS","FETCH_SCHEDULE_SUCCESS","FETCH_SCHEDULE_FAILURE","FETCH_SCHEDULE_LOGS_SUCCESS","FETCH_SCHEDULE_LOGS_FAILURE","REQUEST_RETIRE_SCHEDULE","REQUEST_UNRETIRE_SCHEDULE","UPDATE_SELECTED_SCHEDULE","RESET_SELECTED_SCHEDULE","SEARCH_SCHEDULE","rootReducer","combineReducers","app","state","action","type","map","n","id","Success","Failure","_","cloneDeep","index","findIndex","scheduleId","isRetired","result","filter","name","includes","criteria","configureStore","initialState","logger","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","createStore","applyMiddleware","config","getSchedulesAction","dispatch","axios","get","then","data","Array","isArray","forEach","element","Math","floor","random","length","avatar","catch","error","getScheduleLogsAction","getSchedulesStatus","getScheduleLogsStatus","getSchedules","ids","item","getSelectedScheduleId","getHeaderTexts","getScheduleText","getScheduleLogsText","getLogText","Profile","Avatar","className","cn","styles","orange","purple","ButtonAction","size","variant","onClick","text","Button","e","connect","updateSelectedId","retire","unretire","schedule","isSelected","container","Card","data-test","active","CardContent","content","Typography","title","gutterBottom","component","description","CardActions","event","stopPropagation","handleButtonClick","fetchSchedules","isSuccessfull","isFailure","hasItems","info","disableElevation","items","Time","label","time","Chip","DAY_FORMATE","startTimeFormatted","dayjs","startTime","toString","format","endTimeFormatted","endTime","logs","noWrap","serverName","times","getScheduleLogs","scheduleName","find","fetchScheduleLogs","resetSelectedSchedule","hasLogItems","noinfo","overlay","schedulelogs","modalTitle","failure","failureTitle","retryButton","emptySuccess","Header","props","handleOnChange","setState","search","target","value","handleSearch","keyCode","bind","document","addEventListener","this","removeEventListener","AppBar","position","Toolbar","bar","InputBase","placeholder","classes","root","inputRoot","input","inputInput","inputProps","onChange","Component","searchSchedule","isLoading","bootApp","useEffect","loading","height","width","store","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"+HA8BYA,EAqCAC,EAwBAC,E,0EA7DAF,O,qBAAAA,I,qBAAAA,I,sBAAAA,M,cAqCAC,O,eAAAA,I,eAAAA,I,eAAAA,I,eAAAA,I,mBAAAA,I,oBAAAA,M,cAwBAC,O,2BAAAA,I,qBAAAA,I,yBAAAA,I,yBAAAA,I,sBAAAA,M,KCtFL,IAAMC,EAA4B,CACrCC,OAAQ,CACJC,UAAWL,EAAYM,QACvBC,aAAcP,EAAYM,SAE9BE,wBAAoBC,EACpBJ,UAAW,GACXK,mBAAoB,GACpBH,aAAc,GACdI,MAAO,CACHC,OAAQ,CACJC,UAAW,aAEfR,UAAW,CACPS,iBAAkB,SAClBC,mBAAoB,WACpBC,iBAAkB,2BAClBC,gBAAiB,QACjBC,iBAAkB,2BAEtBX,aAAc,CACZS,iBAAkB,2BAClBC,gBAAiB,QACjBC,iBAAkB,+BAClBC,uBAAwB,6BAE1BC,IAAK,CACHC,eAAgB,QAChBC,aAAc,SAKXC,EAAoC,CAC7C,CACEC,OAAQ,IACRC,MAAO,UAET,CACED,OAAQ,IACRC,MAAO,UAET,CACED,OAAQ,IACRC,MAAO,UAET,CACED,OAAQ,IACRC,MAAO,WCrDAC,EAA2B,2BAC3BC,EAA8B,8BAE9BC,EAAyB,yBACzBC,EAAyB,yBAEzBC,EAA8B,8BAC9BC,EAA8B,8BAE9BC,EAA0B,0BAC1BC,EAA4B,4BAE5BC,EAA2B,2BAC3BC,EAA0B,0BAE1BC,EAAkB,kB,iBCXlBC,EAAcC,YAAgB,CACvCC,ICEsB,WAGV,IAFZC,EAEW,uDAFOrC,EAClBsC,EACW,uCACX,OAAQA,EAAOC,MACX,KAAKhB,EACD,OAAO,2BACAc,GADP,IAEInC,UAAW,GACXK,mBAAoB,GACpBF,wBAAoBC,EACpBL,OAAO,2BACAoC,EAAMpC,QADP,IAEFC,UAAWL,EAAYM,YAInC,KAAKqB,EACD,OAAO,2BACAa,GADP,IAEIjC,aAAc,GACdC,wBAAoBC,EACpBL,OAAO,2BACAoC,EAAMpC,QADP,IAEFG,aAAcP,EAAYM,YAOtC,KAAKsB,EACD,OAAO,2BACAY,GADP,IAEInC,UAAWoC,EAAOpC,UAClBK,mBAAoB+B,EAAOpC,UAAUsC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,MAChDzC,OAAO,2BACAoC,EAAMpC,QADP,IAEFC,UAAWL,EAAY8C,YAInC,KAAKjB,EACD,OAAO,2BACAW,GADP,IAEInC,UAAW,GACXK,mBAAoB,GACpBF,wBAAoBC,EACpBL,OAAO,2BACAoC,EAAMpC,QADP,IAEFC,UAAWL,EAAY+C,YAOnC,KAAKjB,EACD,OAAO,2BACAU,GADP,IAEIjC,aAAckC,EAAOlC,aACrBH,OAAO,2BACAoC,EAAMpC,QADP,IAEFG,aAAcP,EAAY8C,YAItC,KAAKf,EACD,OAAO,2BACAS,GADP,IAEIjC,aAAc,GACdH,OAAO,2BACAoC,EAAMpC,QADP,IAEFG,aAAcP,EAAY+C,YAOtC,KAAKf,EACD,IAAM3B,EAAY2C,IAAEC,UAAUT,EAAMnC,WAC9B6C,EAAQ7C,EAAU8C,WAAU,SAAAP,GAAC,OAAIA,EAAEC,KAAOJ,EAAOW,cAEvD,OADA/C,EAAU6C,GAAOG,WAAY,EACtB,2BACAb,GADP,IAEInC,cAGR,KAAK4B,EACD,IAAM5B,EAAY2C,IAAEC,UAAUT,EAAMnC,WAC9B6C,EAAQ7C,EAAU8C,WAAU,SAAAP,GAAC,OAAIA,EAAEC,KAAOJ,EAAOW,cAEvD,OADA/C,EAAU6C,GAAOG,WAAY,EACtB,2BACAb,GADP,IAEInC,cAGR,KAAK6B,EACD,OAAO,2BACAM,GADP,IAEIhC,mBAAoBiC,EAAOW,aAGnC,KAAKjB,EACD,OAAO,2BACAK,GADP,IAEIhC,wBAAoBC,IAM5B,KAAK2B,EACD,IAAMkB,EAASd,EAAMnC,UAAUkD,QAAO,SAAAX,GAAC,OAAIA,EAAEY,KAAKC,SAAShB,EAAOiB,aAAWf,KAAI,SAAAC,GAAC,OAAIA,EAAEC,MACxF,OAAO,2BACAL,GADP,IAEI9B,mBAAoB4C,IAM5B,QACI,OAAO,eACAd,O,QCxHNmB,EAAiB,SAACC,GAC3B,IAAMC,EAASC,yBACTC,EAAoBC,OAAeC,sCAAwCC,IAC3EC,EAAa,CAACC,IAAOP,GAU3B,OARcQ,YACVhC,EACA,CACIE,IAAKqB,GAETG,EAAiBO,IAAe,WAAf,EAAmBH,M,0CCtB/BI,EACH,wCADGA,EAEH,CACFlE,UAAW,aACXE,aAAc,iBCkKTiE,EAAqB,WAC9B,OAAO,SAAAC,GAEH,OADAA,EAxJyE,CAC7E/B,KAAMhB,IAwJKgD,IAAMC,IAAN,UAAaJ,GAAb,OAA2BA,EAAYlE,YACzCuE,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACDC,MAAMC,QAAQF,IACdA,EAAKG,SAAQ,SAACC,GACV,IAAM/B,EAAQgC,KAAKC,MAAMD,KAAKE,SAAW7D,EAAmB8D,QAC5DJ,EAAQK,OAAS/D,EAAmB2B,MAG5CuB,EAtIuF,CACnG/B,KAAMd,EACNvB,UAoIqDwE,OAE5CU,OAAM,SAACC,GACJf,EA3HqE,CACjF/B,KAAMb,SAoIG4D,EAAwB,WACjC,OAAO,SAAAhB,GAEH,OADAA,EAnK+E,CACnF/B,KAAMf,IAmKK+C,IAAMC,IAAN,UAAaJ,GAAb,OAA2BA,EAAYhE,eACzCqE,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACLJ,EA5HkG,CAC9G/B,KAAMZ,EACNvB,aA0HyDsE,OAEhDU,OAAM,SAACC,GACJf,EAlH+D,CAC3E/B,KAAMX,SC7EG2D,EAAqB,SAAClD,GAAD,OAAmCA,EAAMD,IAAInC,OAAOC,WACzEsF,EAAwB,SAACnD,GAAD,OAAmCA,EAAMD,IAAInC,OAAOG,cAK5EqF,EAAe,SAACpD,GACzB,IAAMqD,EAAMrD,EAAMD,IAAI7B,mBAChB4C,EAASN,IAAEO,OAAOf,EAAMD,IAAIlC,WAAW,SAACyF,GAC1C,OAAOD,EAAIpC,SAASqC,EAAKjD,OAE7B,cAAOS,QAAP,IAAOA,IAAU,IAERyC,EAAwB,SAACvD,GAAD,OAA8BA,EAAMD,IAAI/B,oBAUhEwF,EAAiB,SAACxD,GAAD,OAAwCA,EAAMD,IAAI5B,MAAMC,QACzEqF,EAAkB,SAACzD,GAAD,OAAyCA,EAAMD,IAAI5B,MAAMN,WAC3E6F,EAAsB,SAAC1D,GAAD,OAA6CA,EAAMD,IAAI5B,MAAMJ,cACnF4F,EAAa,SAAC3D,GAAD,OAAoCA,EAAMD,IAAI5B,MAAMS,K,wHCf/DgF,GATmB,SAAC,GAAuB,IAAD,EAApB5E,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACvC,OAAO,eAAC4E,GAAA,EAAD,CAAQC,UAAWC,MAAE,mBACzBC,KAAOC,OAAmB,WAAVhF,GADS,cAEzB+E,KAAOE,OAAmB,WAAVjF,GAFS,IAArB,SAIJD,K,UCWMmF,GAf6B,SAAC,GAAD,QACxCC,YADwC,MACjC,QADiC,MAExCC,eAFwC,MAE9B,WAF8B,MAGxCnE,YAHwC,MAGjC,YAHiC,EAIxCoE,EAJwC,EAIxCA,QACAC,EALwC,EAKxCA,KALwC,OAO5C,eAACC,GAAA,EAAD,CACIJ,KAAMA,EACNC,QAASA,EACTpF,MAAOiB,EACPoE,QAAS,SAACG,GAAD,OAAOH,EAAQG,IAJ5B,SAKKF,KCuEUG,gBAJS,SAAC1E,GAAD,MAA+C,CACrE7B,MAAOsF,EAAgBzD,OATE,SACvBiC,GADuB,MAEU,CAC/B0C,iBAAkB,SAACtE,GAAD,OAAgB4B,EJ2C+C,CACnF/B,KAAMR,EACNkB,WI7CoEP,KAClEuE,OAAQ,SAACvE,GAAD,OAAgB4B,EJYyC,CACnE/B,KAAMV,EACNoB,WIdkDP,KAChDwE,SAAU,SAACxE,GAAD,OAAgB4B,EJ0B2C,CACvE/B,KAAMT,EACNmB,WI5BsDP,QAO3CqE,EA7DyB,SAAC,GAOjC,IANNI,EAMK,EANLA,SACAC,EAKK,EALLA,WACA5G,EAIK,EAJLA,MACAwG,EAGK,EAHLA,iBACAC,EAEK,EAFLA,OACAC,EACK,EADLA,SAWA,OACA,sBAAKf,UAAWE,KAAOgB,UAAvB,SACE,gBAACC,EAAA,EAAD,CACEC,YAAA,eAAmBJ,EAASzE,IAC5BiE,QAAS,kBAAMK,EAAiBG,EAASzE,KACzCgE,QAAQ,WACRP,UAAWC,KAAG,eACXC,KAAOmB,OAASJ,IALrB,UAOE,gBAACK,EAAA,EAAD,CAAatB,UAAWE,KAAOqB,QAA/B,UACE,uBAAKvB,UAAWE,KAAO5F,OAAvB,UACE,eAAC,GAAD,CAASY,OAAQ8F,EAAShC,OAAO9D,OAAQC,MAAO6F,EAAShC,OAAO7D,QAChE,eAACqG,EAAA,EAAD,CAAYxB,UAAWE,KAAOuB,MAAOtG,MAAM,gBAAgBuG,cAAY,EAAvE,SACGV,EAAS9D,UAGd,eAACsE,EAAA,EAAD,CAAYjB,QAAQ,QAAQoB,UAAU,IAAtC,SACGX,EAASY,iBAGd,eAACC,EAAA,EAAD,CAAa7B,UAAWE,KAAO/D,OAA/B,SACE,eAAC,GAAD,CACEiF,YAAA,iBAAqBJ,EAASzE,GAA9B,WACAkE,KAAOO,EAASjE,UAAqC1C,EAAMI,mBAA/BJ,EAAMG,iBAClC4B,KAAO4E,EAASjE,UAA0B,UAAd,YAC5ByD,QAAS,SAACsB,GAAD,OAlCS,SAACA,GACpBd,EAASjE,UAGZgE,EAASC,EAASzE,IAFlBuE,EAAOE,EAASzE,IAIlBuF,EAAMC,kBA4BoBC,CAAkBF,gB,oBCOjClB,gBAbS,SAAC1E,GAAD,MAA4C,CAClEpC,OAAQsF,EAAmBlD,GAC3BnC,UAAWuF,EAAapD,GACxB7B,MAAOsF,EAAgBzD,GACvBhC,mBAAoBuF,EAAsBvD,OAGjB,SACvBiC,GADuB,MAEO,CAChC8D,eAAgB,kBAAM9D,EAASD,SAGlB0C,EAxDuB,SAAC,GAM/B,IALN9G,EAKK,EALLA,OACAO,EAIK,EAJLA,MACAN,EAGK,EAHLA,UACAG,EAEK,EAFLA,mBACA+H,EACK,EADLA,eAEMC,EAAgBpI,IAAWJ,EAAY8C,QACvC2F,EAAYrI,IAAWJ,EAAY+C,QAEnC2F,EAAW5D,MAAMC,QAAQ1E,IAAcA,EAAUgF,OAAS,EAEhE,OACA,uBAAKiB,UAAWE,KAAOgB,UAAvB,UAEKiB,GACC,uBAAKnC,UAAWE,KAAOmC,KAAvB,UACE,6BAAIhI,EAAMK,mBACV,eAACgG,GAAA,EAAD,CACEF,QAAS,kBAAMyB,KACf1B,QAAQ,YACRpF,MAAM,UACNmH,kBAAgB,EAJlB,SAKGjI,EAAMM,qBAKZuH,IAAkBE,GACjB,sBAAKpC,UAAWE,KAAOmC,KAAvB,SACE,6BAAIhI,EAAMO,qBAId,sBAAKoF,UAAWE,KAAOqC,MAAvB,SACCL,GAAiBE,GAAarI,EAAUsC,KAAI,SAAAC,GAC3C,IAAM2E,EAAa3E,EAAEC,KAAOrC,EAC5B,OAAO,eAAC,GAAD,CAAyB8G,SAAU1E,EAAG2E,WAAYA,GAA/B3E,EAAEC,e,kDCvCrBiG,GAda,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACxB,iCACI,eAAClB,EAAA,EAAD,CACIxB,UAAWE,KAAOuC,MAClBlC,QAAQ,WACRmB,cAAY,EAHhB,SAIKe,IAEL,+BACI,eAACE,GAAA,EAAD,CAAMrC,KAAK,QAAQmC,MAAOC,U,oBCNhCE,GAAc,cAsCLhC,gBANS,SAAC1E,GAAD,MACtB,CACE7B,MAAOwF,EAAW3D,MAIP0E,EA3BmB,SAAC,GAAqB,IAAnBpB,EAAkB,EAAlBA,KAAMnF,EAAY,EAAZA,MACjCwI,EAAsBC,KAAMtD,EAAKuD,UAAUC,YAAYC,OAAOL,IAC9DM,EAAoBJ,KAAMtD,EAAK2D,QAAQH,YAAYC,OAAOL,IAChE,OACA,eAACzB,EAAA,EAAD,CAAMnB,UAAWE,KAAOkD,KAAM7C,QAAQ,WAAtC,SACE,gBAACe,EAAA,EAAD,CAAatB,UAAWE,KAAOqB,QAA/B,UACE,uBAAKvB,UAAWE,KAAO5F,OAAvB,UACE,eAACkH,EAAA,EAAD,CAAYxB,UAAWE,KAAOuB,MAAO4B,QAAQ,EAAMlI,MAAM,UAAUuG,cAAY,EAA/E,SACGlC,EAAK8D,aAER,eAACX,GAAA,EAAD,CAAMrC,KAAK,QAAQmC,MAAOjD,EAAK1F,YAEjC,uBAAKkG,UAAWE,KAAOqD,MAAvB,UACI,eAAC,GAAD,CAAMd,MAAOpI,EAAMU,eAAgB2H,KAAMG,IACzC,eAAC,GAAD,CAAMJ,MAAOpI,EAAMW,aAAc0H,KAAMQ,e,oBCyEpCtC,gBApBS,SAAC1E,GACrB,IAAMK,EAAKkD,EAAsBvD,GAC3BnC,EAAYuF,EAAapD,GACzBkH,EPpEqB,SAAClH,GAAD,OAA0CA,EAAMD,IAAIhC,aOoElEuJ,CAAgBtH,GAC7B,MAAO,CACH+E,aAAc1E,EACdkH,eAAgBlH,KAAQxC,GAAaA,EAAU2J,MAAK,SAAApH,GAAC,OAAIA,EAAEC,KAAOA,KAAIW,KACtEpD,OAAQuF,EAAsBnD,GAC9BkH,OAAQ7G,KAAQ6G,GAAQA,EAAKnG,QAAO,SAAAX,GAAC,OAAIA,EAAEQ,aAAeP,KAC1DlC,MAAOuF,EAAoB1D,OAIR,SACzBiC,GADyB,MAEQ,CAC/BwF,kBAAmB,kBAAMxF,EAASgB,MAClCyE,sBAAuB,kBAAMzF,ERkCkC,CAC/D/B,KAAMP,QQhCK+E,EAlF6B,SAAC,GAQrC,IAPNK,EAOK,EAPLA,WACAwC,EAMK,EANLA,aACA3J,EAKK,EALLA,OACAsJ,EAIK,EAJLA,KACA/I,EAGK,EAHLA,MACAsJ,EAEK,EAFLA,kBACAC,EACK,EADLA,sBAEM1B,EAAgBpI,IAAWJ,EAAY8C,QACvC2F,EAAYrI,IAAWJ,EAAY+C,QACnCoH,EAAcrF,MAAMC,QAAQ2E,IAASA,EAAKrE,OAAS,EAEzD,OACA,wCAEIkC,GAAe,sBAAKjB,UAAWE,KAAO4D,OAAvB,SACf,6BAAIzJ,EAAMQ,2BAEXoG,GACC,uCAEE,sBAAKjB,UAAWE,KAAO6D,QAASvD,QAAS,kBAAMoD,OAC/C,sBAAK5D,UAAWE,KAAO8D,aAAvB,SACE,uCAEE,eAACxC,EAAA,EAAD,CAAYxB,UAAWE,KAAO+D,WAAY1D,QAAQ,KAAlD,SAAwDkD,IAEvDtB,GACC,uBAAKnC,UAAWE,KAAOgE,QAAvB,UACE,eAAC1C,EAAA,EAAD,CAAYxB,UAAWE,KAAOiE,aAAc5D,QAAQ,QAAQoB,UAAU,IAAtE,SACGtH,EAAMK,mBAET,eAACgG,GAAA,EAAD,CACEV,UAAWE,KAAOkE,YAClB5D,QAAS,kBAAMmD,KACfpD,QAAQ,YACRpF,MAAM,UACNmH,kBAAgB,EALlB,SAMGjI,EAAMM,qBAKZuH,IAAkB2B,GACjB,sBAAK7D,UAAWE,KAAOmE,aAAvB,SACE,6BAAIhK,EAAMO,qBAIbsH,GAAiB2B,GAChB,sBAAK7D,UAAWE,KAAOqC,MAAvB,SACGa,EAAK/G,KAAI,SAAAC,GAAC,OAAI,eAAC,GAAD,CAAoBkD,KAAMlD,GAAZA,EAAEC,uB,mHClDzC+H,G,oDACJ,WAAYC,GAAQ,IAAD,+BACjB,cAAMA,IAQRC,eAAiB,SAAC1C,GAChB,EAAK2C,SAAL,2BACK,EAAKvI,OADV,IAEEwI,OAAQ5C,EAAM6C,OAAOC,UAZN,EAgBnBC,aAAe,SAAC/C,GACd,OAAOA,EAAMgD,SACX,KA3BgB,IA8BdJ,EADmB,EAAKH,MAAhBG,QACD,EAAKxI,MAAMwI,UAnBtB,EAAKxI,MAAQ,CACXwI,OAAQ,IAEV,EAAKF,eAAeO,KAApB,iBACA,EAAKF,aAAaE,KAAlB,iBANiB,E,sDA6BnB,WACEC,SAASC,iBAAiB,UAAWC,KAAKL,gB,kCAG5C,WACEG,SAASG,oBAAoB,UAAWD,KAAKL,gB,oBAG/C,WACE,IAAQpD,EAAUyD,KAAKX,MAAf9C,MACR,OACE,sBAAKzB,UAAWE,KAAOgB,UAAvB,SACE,eAACkE,GAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,gBAACC,GAAA,EAAD,CAAStF,UAAWE,KAAOqF,IAA3B,UACE,eAAC/D,EAAA,EAAD,CAAYjB,QAAQ,KAApB,SAA0BkB,IAC1B,sBAAKzB,UAAWE,KAAOwE,OAAvB,SACI,eAACc,GAAA,EAAD,CACEC,YAAY,eACZC,QAAS,CACPC,KAAMzF,KAAO0F,UACbC,MAAO3F,KAAO4F,YAEhBC,WAAY,CAAE,aAAc,UAC5BC,SAAUd,KAAKV,mBAGrB,eAAC,KAAD,e,GAxDSyB,aA0ENrF,gBAVS,SAAC1E,GAAD,MAAyC,CAC7DuF,MAAO/B,EAAexD,GAAO3B,cAGN,SACzB4D,GADyB,MAEA,CACzBuG,OAAQ,SAACtH,GAAD,OAAsBe,ETsDF,SAACf,GAAD,MAAuC,CACjEhB,KAAMN,EACNsB,YSxDqC8I,CAAe9I,QAGzCwD,CAGb0D,I,oBC7Ca1D,gBAbS,SAAC1E,GAAD,MAAsC,CAC5DiK,UAAW/G,EAAmBlD,KAAWxC,EAAYM,SAAWqF,EAAsBnD,KAAWxC,EAAYM,YAGpF,SACzBmE,GADyB,MAEH,CACtBiI,QAAS,WACPjI,EAASD,KACTC,EAASgB,SAIEyB,EAxCW,SAAC,GAGpB,IAFLuF,EAEI,EAFJA,UACAC,EACI,EADJA,QASA,OAJAC,qBAAU,WACRD,MACC,CAACA,IAGF,uBAAKpG,UAAWE,IAAOgB,UAAvB,UAEE,eAAC,GAAD,IACCiF,GACC,sBAAKnG,UAAWE,IAAOoG,QAAvB,SACE,eAAC,KAAD,CAAclK,KAAK,OAAOjB,MAAM,UAAUoL,OAAQ,GAAIC,MAAO,QAE/DL,GAAc,uBAAKnG,UAAWE,IAAOqB,QAAvB,UACd,eAAC,GAAD,IACA,eAAC,GAAD,aCpCFkF,GAAQpJ,EAAexD,GAE7B6M,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUH,MAAOA,GAAjB,SACE,eAAC,GAAD,QAGJzB,SAAS6B,eAAe,U,mBCf1BC,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,QAAU,8BAA8B,WAAa,iCAAiC,OAAS,6BAA6B,aAAe,mCAAmC,MAAQ,4BAA4B,QAAU,8BAA8B,aAAe,mCAAmC,YAAc,oC,mBCAhXD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,6BAA6B,OAAS,6BAA6B,MAAQ,8B,mBCAhOD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,OAAS,wBAAwB,MAAQ,uBAAuB,MAAQ,yB,mBCAvHD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,IAAM,oBAAoB,MAAQ,sBAAsB,OAAS,uBAAuB,WAAa,2BAA2B,UAAY,0BAA0B,WAAa,6B,mBCA3OD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,KAAO,wBAAwB,MAAQ,2B,mBCAlGD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,QAAU,qBAAqB,QAAU,uB,mBCA9FD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,OAAS,0B,mBCA5DD,EAAOC,QAAU,CAAC,MAAQ,sB","file":"static/js/main.656c2d73.chunk.js","sourcesContent":["import { DefaultRootState } from \"react-redux\";\r\n\r\n/**\r\n * The App Status\r\n */\r\nexport interface AppState extends DefaultRootState {\r\n    status: AppStatusSectionsState;\r\n    selectedScheduleId?: number;\r\n    schedules: ScheduleState[];\r\n    visibleScheduleIds: number[];\r\n    scheduleLogs: ScheduleLogState[];\r\n    texts: {\r\n        header: HeaderTextStatus;\r\n        schedules: ScheduleTextState;\r\n        scheduleLogs: ScheduleLogsTextState;\r\n        log: LogTextState;\r\n    }\r\n}\r\n\r\n/**\r\n * The status to fetch data per section\r\n */\r\nexport interface AppStatusSectionsState {\r\n    schedules: StatusState;\r\n    scheduleLogs: StatusState;\r\n}\r\n\r\n/**\r\n * The Boot Status is defined for options: Loading / Success / Failure.\r\n */\r\nexport enum StatusState {\r\n    Loading,\r\n    Success,\r\n    Failure\r\n}\r\n\r\n/**\r\n * The Schedule interface.\r\n */\r\nexport interface ScheduleState {\r\n    id: number;\r\n    avatar: AvatarState;\r\n    name: string;\r\n    description: string;\r\n    isRetired: boolean;\r\n    tasksCount: number;\r\n    startPoint: Date;\r\n    endPoint: Date;\r\n    dayOfWeek: number;\r\n    dayOfMonth: number;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    intervalType?: IntervalTypeState;\r\n    timePeriod?: number;\r\n}\r\n\r\n/**\r\n * The Avatar Identification\r\n */\r\nexport interface AvatarState {\r\n    letter: string;\r\n    color: string;\r\n}\r\n\r\n/**\r\n * The Schedule Interval Types\r\n */\r\nexport enum IntervalTypeState {\r\n    Once,\r\n    Year,\r\n    Week,\r\n    Hour,\r\n    Minute,\r\n    Second\r\n}\r\n\r\n/**\r\n * The Schedule Logs interface.\r\n */\r\nexport interface ScheduleLogState {\r\n    id: number;\r\n    startTime: Date;\r\n    endTime: Date;\r\n    status: LogStatusState;\r\n    serverName: string;\r\n    scheduleId: number;\r\n}\r\n\r\n/**\r\n * The Schedule Logs Status\r\n */\r\nexport enum LogStatusState {\r\n    Terminated,\r\n    Pending,\r\n    Completed,\r\n    Exception,\r\n    Running\r\n}\r\n\r\n/**\r\n * Texts used on Header\r\n * Note: This allow us to add localisation feature easily\r\n */\r\nexport interface HeaderTextStatus {\r\n    titleText: string;\r\n}\r\n\r\n/**\r\n * Texts used on Schedule\r\n * Note: This allow us to add localisation feature easily\r\n */\r\nexport interface ScheduleTextState {\r\n    buttonRetireText: string;\r\n    buttonUnretireText: string;\r\n    errorMessageText: string;\r\n    buttonRetryText: string;\r\n    emptyMessageText: string;\r\n}\r\n\r\n/**\r\n * Texts used on Schedule Logs\r\n */\r\nexport interface ScheduleLogsTextState {\r\n    errorMessageText: string;\r\n    buttonRetryText: string;\r\n    emptyMessageText: string;\r\n    noSelectedScheduleText: string;\r\n}\r\n\r\n/**\r\n * Texts used on Log Item\r\n */\r\nexport interface LogTextState {\r\n    labelStartTime: string;\r\n    labelEndTime: string;\r\n}\r\n","import { AppState, AvatarState, StatusState } from \"./appState\";\r\n\r\n/**\r\n * This is the initial state of redux.\r\n */\r\nexport const appInitialState: AppState = {\r\n    status: {\r\n        schedules: StatusState.Loading,\r\n        scheduleLogs: StatusState.Loading,\r\n    },\r\n    selectedScheduleId: undefined,\r\n    schedules: [],\r\n    visibleScheduleIds: [],\r\n    scheduleLogs: [],\r\n    texts: {\r\n        header: {\r\n            titleText: 'Schedules',\r\n        },\r\n        schedules: {\r\n            buttonRetireText: 'Retire',\r\n            buttonUnretireText: 'Unretire',\r\n            errorMessageText: 'Something went wrong ...',\r\n            buttonRetryText: 'Retry',\r\n            emptyMessageText: 'No schedules available.',\r\n        },\r\n        scheduleLogs: {\r\n          errorMessageText: 'Something went wrong ...',\r\n          buttonRetryText: 'Retry',\r\n          emptyMessageText: 'No schedules logs available.',\r\n          noSelectedScheduleText: 'Please select a schedule.',\r\n        },\r\n        log: {\r\n          labelStartTime: 'Start',\r\n          labelEndTime: 'End',\r\n        },\r\n    }\r\n};\r\n\r\nexport const avatarInitialState: AvatarState[] = [\r\n    {\r\n      letter: 'N',\r\n      color: 'orange',\r\n    },\r\n    {\r\n      letter: 'A',\r\n      color: 'purple',\r\n    },\r\n    {\r\n      letter: 'T',\r\n      color: 'orange',\r\n    },\r\n    {\r\n      letter: 'J',\r\n      color: 'purple',\r\n    }\r\n];","export const LOADING_SCHEDULES_STATUS = 'LOADING_SCHEDULES_STATUS';\r\nexport const LOADING_SCHEDULELOGS_STATUS = 'LOADING_SCHEDULELOGS_STATUS';\r\n\r\nexport const FETCH_SCHEDULE_SUCCESS = 'FETCH_SCHEDULE_SUCCESS';\r\nexport const FETCH_SCHEDULE_FAILURE = 'FETCH_SCHEDULE_FAILURE';\r\n\r\nexport const FETCH_SCHEDULE_LOGS_SUCCESS = 'FETCH_SCHEDULE_LOGS_SUCCESS';\r\nexport const FETCH_SCHEDULE_LOGS_FAILURE = 'FETCH_SCHEDULE_LOGS_FAILURE';\r\n\r\nexport const REQUEST_RETIRE_SCHEDULE = 'REQUEST_RETIRE_SCHEDULE';\r\nexport const REQUEST_UNRETIRE_SCHEDULE = 'REQUEST_UNRETIRE_SCHEDULE';\r\n\r\nexport const UPDATE_SELECTED_SCHEDULE = 'UPDATE_SELECTED_SCHEDULE';\r\nexport const RESET_SELECTED_SCHEDULE = 'RESET_SELECTED_SCHEDULE';\r\n\r\nexport const SEARCH_SCHEDULE = 'SEARCH_SCHEDULE';","import { Reducer, combineReducers } from 'redux';\r\nimport { AppState } from './appState';\r\nimport { appReducer } from './app/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer as Reducer<AppState>,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport type DefaultRootState = ReturnType<typeof rootReducer>;","import { AppActions } from './actions';\r\nimport { AppState, StatusState } from '../appState';\r\nimport { appInitialState } from '../initialState';\r\nimport { FETCH_SCHEDULE_SUCCESS, FETCH_SCHEDULE_FAILURE, FETCH_SCHEDULE_LOGS_SUCCESS, FETCH_SCHEDULE_LOGS_FAILURE, REQUEST_RETIRE_SCHEDULE, REQUEST_UNRETIRE_SCHEDULE, UPDATE_SELECTED_SCHEDULE, RESET_SELECTED_SCHEDULE, LOADING_SCHEDULES_STATUS, LOADING_SCHEDULELOGS_STATUS, SEARCH_SCHEDULE } from '../types';\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const appReducer = (\r\n    state: AppState = appInitialState,\r\n    action: AppActions\r\n): AppState => {\r\n    switch (action.type) {\r\n        case LOADING_SCHEDULES_STATUS: {\r\n            return {\r\n                ...state,\r\n                schedules: [],\r\n                visibleScheduleIds: [],\r\n                selectedScheduleId: undefined,\r\n                status: {\r\n                    ...state.status,\r\n                    schedules: StatusState.Loading,\r\n                },\r\n            };\r\n        }\r\n        case LOADING_SCHEDULELOGS_STATUS: {\r\n            return {\r\n                ...state,\r\n                scheduleLogs: [],\r\n                selectedScheduleId: undefined,\r\n                status: {\r\n                    ...state.status,\r\n                    scheduleLogs: StatusState.Loading,\r\n                },\r\n            };\r\n        }\r\n        /**\r\n         * Fetch Schedule\r\n         */\r\n        case FETCH_SCHEDULE_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                schedules: action.schedules,\r\n                visibleScheduleIds: action.schedules.map(n => n.id),\r\n                status: {\r\n                    ...state.status,\r\n                    schedules: StatusState.Success,\r\n                },\r\n            };\r\n        }\r\n        case FETCH_SCHEDULE_FAILURE: {\r\n            return {\r\n                ...state,\r\n                schedules: [],\r\n                visibleScheduleIds: [],\r\n                selectedScheduleId: undefined,\r\n                status: {\r\n                    ...state.status,\r\n                    schedules: StatusState.Failure,\r\n                },\r\n            };\r\n        }\r\n        /**\r\n         * Fetch Schedule Logs\r\n         */\r\n        case FETCH_SCHEDULE_LOGS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                scheduleLogs: action.scheduleLogs,\r\n                status: {\r\n                    ...state.status,\r\n                    scheduleLogs: StatusState.Success,\r\n                },\r\n            };\r\n        }\r\n        case FETCH_SCHEDULE_LOGS_FAILURE: {\r\n            return {\r\n                ...state,\r\n                scheduleLogs: [],\r\n                status: {\r\n                    ...state.status,\r\n                    scheduleLogs: StatusState.Failure,\r\n                },\r\n            };\r\n        }\r\n        /**\r\n         * User Actions\r\n         */\r\n        case REQUEST_RETIRE_SCHEDULE: {\r\n            const schedules = _.cloneDeep(state.schedules);\r\n            const index = schedules.findIndex(n => n.id === action.scheduleId);\r\n            schedules[index].isRetired = true;\r\n            return {\r\n                ...state,\r\n                schedules,\r\n            };\r\n        }\r\n        case REQUEST_UNRETIRE_SCHEDULE: {\r\n            const schedules = _.cloneDeep(state.schedules);\r\n            const index = schedules.findIndex(n => n.id === action.scheduleId);\r\n            schedules[index].isRetired = false;\r\n            return {\r\n                ...state,\r\n                schedules,\r\n            };\r\n        }\r\n        case UPDATE_SELECTED_SCHEDULE: {\r\n            return {\r\n                ...state,\r\n                selectedScheduleId: action.scheduleId,\r\n            };\r\n        }\r\n        case RESET_SELECTED_SCHEDULE: {\r\n            return {\r\n                ...state,\r\n                selectedScheduleId: undefined,\r\n            };\r\n        }\r\n        /**\r\n         * Search Schedules\r\n         */\r\n        case SEARCH_SCHEDULE: {\r\n            const result = state.schedules.filter(n => n.name.includes(action.criteria)).map(n => n.id);\r\n            return {\r\n                ...state,\r\n                visibleScheduleIds: result,\r\n            };\r\n        }\r\n        /**\r\n         * Default behaviour\r\n         */\r\n        default:\r\n            return {\r\n                ...state,\r\n            };\r\n    }\r\n};\r\n","import { AnyAction } from 'redux';\r\nimport { AppState } from './appState';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { rootReducer } from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport type AppThunk<R> = ThunkAction<R, AppState, unknown, AnyAction>;\r\nexport type AppDispatch = ThunkDispatch<AppState, unknown, AnyAction>;\r\n\r\n\r\nexport const configureStore = (initialState: AppState) => {\r\n    const logger = createLogger();\r\n    const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n    const middleware = [thunk, logger];\r\n\r\n    const store = createStore(\r\n        rootReducer,\r\n        {\r\n            app: initialState,\r\n        },\r\n        composeEnhancers(applyMiddleware(...middleware)),\r\n    );\r\n\r\n    return store;\r\n};\r\n\r\nexport default configureStore;\r\n","export const config = {\n    host: \"https://myschedules-api.herokuapp.com\",\n    path: {\n        schedules: \"/schedules\",\n        scheduleLogs: \"/scheduleLogs\"\n    }\n};","import axios from 'axios';\r\nimport { Action } from 'redux';\r\nimport { config } from '../../config';\r\nimport { AppDispatch } from '../store';\r\nimport { avatarInitialState } from '../../redux/initialState';\r\nimport { FETCH_SCHEDULE_SUCCESS, FETCH_SCHEDULE_FAILURE, FETCH_SCHEDULE_LOGS_SUCCESS, FETCH_SCHEDULE_LOGS_FAILURE, REQUEST_RETIRE_SCHEDULE, REQUEST_UNRETIRE_SCHEDULE, UPDATE_SELECTED_SCHEDULE, RESET_SELECTED_SCHEDULE, LOADING_SCHEDULES_STATUS, LOADING_SCHEDULELOGS_STATUS, SEARCH_SCHEDULE } from \"../types\";\r\n\r\n/**\r\n ** This type is used when the action setLoadingStatusForSchedules is dispatched.\r\n */\r\nexport interface SetLoadingStatusForSchedules extends Action<string> {\r\n}\r\n\r\n/**\r\n ** This action is dispatched when the schedules data is not fetched sucessfully and the user try to fetch it again.\r\n */\r\nexport const setLoadingStatusForSchedules = (): SetLoadingStatusForSchedules => ({\r\n    type: LOADING_SCHEDULES_STATUS,\r\n});\r\n\r\n/**\r\n ** This type is used when the action setLoadingStatusForScheduleLogs is dispatched.\r\n */\r\nexport interface SetLoadingStatusForScheduleLogs extends Action<string> {\r\n}\r\n\r\n/**\r\n ** This action is dispatched when the schedule logs data is not fetched sucessfully and the user try to fetch it again.\r\n */\r\nexport const setLoadingStatusForScheduleLogs = (): SetLoadingStatusForScheduleLogs => ({\r\n    type: LOADING_SCHEDULELOGS_STATUS,\r\n});\r\n\r\n/**\r\n ** This type is used when the action fetchScheduleSuccessfullyAction is dispatched.\r\n */\r\nexport interface FetchScheduleSuccessfullyAction extends Action<string> {\r\n    schedules: any[]\r\n}\r\n\r\n/**\r\n ** This action is dispatched when the schedule is sucessfully fetched.\r\n */\r\nexport const fetchScheduleSuccessfullyAction = (schedules: any[]): FetchScheduleSuccessfullyAction => ({\r\n    type: FETCH_SCHEDULE_SUCCESS,\r\n    schedules,\r\n});\r\n\r\n/**\r\n ** This type is used when the action fetchScheduleLogsFailureAction is dispatched.\r\n */\r\nexport interface FetchScheduleFailureAction extends Action<string> { }\r\n\r\n\r\n/**\r\n ** This action is dispatched when the schedule is sucessfully fetched.\r\n */\r\nexport const fetchScheduleLogsFailureAction = (): FetchScheduleLogsFailureAction => ({\r\n    type: FETCH_SCHEDULE_FAILURE,\r\n});\r\n\r\n/**\r\n ** This type is used when the action fetchScheduleLogsSuccessfullyAction is dispatched.\r\n */\r\nexport interface FetchScheduleLogsSuccessfullyAction extends Action<string> {\r\n    scheduleLogs: any[]\r\n}\r\n\r\n/**\r\n ** This action is dispatched when the schedule logs is sucessfully fetched.\r\n */\r\nexport const fetchScheduleLogsSuccessfullyAction = (scheduleLogs: any[]): FetchScheduleLogsSuccessfullyAction => ({\r\n    type: FETCH_SCHEDULE_LOGS_SUCCESS,\r\n    scheduleLogs,\r\n});\r\n\r\n/**\r\n ** This type is used when the action fetchScheduleLogsFailure is dispatched.\r\n */\r\nexport interface FetchScheduleLogsFailureAction extends Action<string> { }\r\n\r\n/**\r\n * This action is dispatched when the schedule logs is not fetched sucessfully.\r\n */\r\nexport const fetchScheduleLogsFailure = (): FetchScheduleLogsFailureAction => ({\r\n    type: FETCH_SCHEDULE_LOGS_FAILURE,\r\n});\r\n\r\n/**\r\n ** This type is used when a schedule should be retired.\r\n */\r\nexport interface RetireSchedule extends Action<string> {\r\n    scheduleId: number\r\n}\r\n\r\n/**\r\n * This action is dispatched when the user wants to retire the schedule.\r\n */\r\nexport const retireSchedule = (scheduleId: number): RetireSchedule => ({\r\n    type: REQUEST_RETIRE_SCHEDULE,\r\n    scheduleId,\r\n});\r\n\r\n/**\r\n ** This type is used when a schedule should be unretired.\r\n */\r\nexport interface UnretireSchedule extends Action<string> {\r\n    scheduleId: number\r\n}\r\n\r\n/**\r\n * This action is dispatched when the user wants to unretire the schedule.\r\n */\r\nexport const unretireSchedule = (scheduleId: number): UnretireSchedule => ({\r\n    type: REQUEST_UNRETIRE_SCHEDULE,\r\n    scheduleId,\r\n});\r\n\r\n/**\r\n ** This type is used to set the select schedule to the selected one\r\n */\r\nexport interface UpdateSelectedSchedule extends Action<string> {\r\n    scheduleId: number\r\n}\r\n\r\n/**\r\n * This action is dispatched when the user select another schedule card\r\n */\r\nexport const updateSelectedSchedule = (scheduleId: number): UpdateSelectedSchedule => ({\r\n    type: UPDATE_SELECTED_SCHEDULE,\r\n    scheduleId,\r\n});\r\n\r\n/**\r\n ** This type is used to reset the select schedule\r\n */\r\nexport interface ResetSelectedSchedule extends Action<string> {\r\n}\r\n\r\n/**\r\n * This action is dispatched to reset the selected schedule\r\n */\r\nexport const resetSelectedSchedule = (): ResetSelectedSchedule => ({\r\n    type: RESET_SELECTED_SCHEDULE,\r\n});\r\n\r\n/**\r\n ** This type is used to search the schedules\r\n */\r\nexport interface SearchSchedule extends Action<string> {\r\n    criteria: string;\r\n}\r\n\r\n/**\r\n * This action is dispatched to search the schedules and show a subset of schedules\r\n */\r\nexport const searchSchedule = (criteria: string): SearchSchedule => ({\r\n    type: SEARCH_SCHEDULE,\r\n    criteria,\r\n});\r\n\r\n/**\r\n * This function fetch the schedules list.\r\n * If fetch is sucessfull, is dispatched a successfull action to fill the schedules on store\r\n * Otherwise, a fectch error must be set on store.\r\n */\r\nexport const getSchedulesAction = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        dispatch(setLoadingStatusForSchedules());\r\n        return axios.get(`${config.host}${config.path.schedules}`)\r\n            .then(({ data }) => {\r\n                if (Array.isArray(data)) {\r\n                    data.forEach((element) => {\r\n                        const index = Math.floor(Math.random() * avatarInitialState.length);\r\n                        element.avatar = avatarInitialState[index];\r\n                    });\r\n                }\r\n                dispatch(fetchScheduleSuccessfullyAction(data));\r\n            })\r\n            .catch((error) => {\r\n                dispatch(fetchScheduleLogsFailureAction());\r\n            });\r\n    };\r\n};\r\n\r\n/**\r\n * This function fetch the schedule logs list.\r\n * If fetch is sucessfull, is dispatched a successfull action to fill the schedule logs on store\r\n * Otherwise, a fectch error must be set on store.\r\n */\r\nexport const getScheduleLogsAction = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        dispatch(setLoadingStatusForScheduleLogs());\r\n        return axios.get(`${config.host}${config.path.scheduleLogs}`)\r\n            .then(({ data }) => {\r\n                dispatch(fetchScheduleLogsSuccessfullyAction(data));\r\n            })\r\n            .catch((error) => {\r\n                dispatch(fetchScheduleLogsFailure());\r\n            });\r\n    };\r\n};\r\n\r\nexport type AppActions = FetchScheduleSuccessfullyAction & FetchScheduleLogsFailureAction & FetchScheduleLogsSuccessfullyAction & FetchScheduleLogsFailureAction & RetireSchedule & UnretireSchedule & UpdateSelectedSchedule & SearchSchedule;\r\n","import { HeaderTextStatus, ScheduleTextState, ScheduleState, ScheduleLogState, StatusState, ScheduleLogsTextState, LogTextState } from \"../appState\";\r\nimport { RootState } from \"../reducers\";\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * Get Fetch Status\r\n * @param state\r\n */\r\nexport const getSchedulesStatus = (state: RootState): StatusState => state.app.status.schedules;\r\nexport const getScheduleLogsStatus = (state: RootState): StatusState => state.app.status.scheduleLogs;\r\n\r\n/**\r\n * Get Schedules , Selected Shedule Id\r\n */\r\nexport const getSchedules = (state: RootState): ScheduleState[] => {\r\n    const ids = state.app.visibleScheduleIds;\r\n    const result = _.filter(state.app.schedules, (item) => {\r\n        return ids.includes(item.id);\r\n    });\r\n    return result ?? [];\r\n};\r\nexport const getSelectedScheduleId = (state: RootState): number => state.app.selectedScheduleId;\r\n\r\n/**\r\n * Get ScheduleLogs , Selected Shedule Id\r\n */\r\nexport const getScheduleLogs = (state: RootState): ScheduleLogState[] => state.app.scheduleLogs;\r\n\r\n/**\r\n * Get Texts\r\n */\r\nexport const getHeaderTexts = (state: RootState): HeaderTextStatus => state.app.texts.header;\r\nexport const getScheduleText = (state: RootState): ScheduleTextState => state.app.texts.schedules;\r\nexport const getScheduleLogsText = (state: RootState): ScheduleLogsTextState => state.app.texts.scheduleLogs;\r\nexport const getLogText = (state: RootState): LogTextState => state.app.texts.log;\r\n","import { FC } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport styles from './profile.module.css';\nimport cn from 'classnames';\n\nexport interface ProfileProps {\n  letter: string;\n  color: string;\n}\n\nconst Profile: FC<ProfileProps> = ({ letter, color }) => {\n      return <Avatar className={cn({\n        [styles.orange]: color === 'orange',\n        [styles.purple]: color === 'purple',\n      })}>\n        {letter}\n      </Avatar>;\n};\n\nexport default Profile;","import { FC } from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport interface ButtonActionProps {\n    text: string;\n    size?: 'large' | 'medium' | 'small';\n    variant?: 'contained' | 'outlined' | 'text';\n    type?: 'default' | 'inherit' | 'primary' | 'secondary';\n    onClick: (e) => void;\n}\n\nconst ButtonAction: FC<ButtonActionProps> = ({\n    size = 'small',\n    variant = 'outlined',\n    type = 'secondary',\n    onClick,\n    text\n}) => (\n<Button\n    size={size}\n    variant={variant}\n    color={type}\n    onClick={(e) => onClick(e)}>\n    {text}\n</Button>);\n\nexport default ButtonAction;","import { FC } from 'react';\nimport { ScheduleState, ScheduleTextState } from '../../redux/appState';\nimport { AppDispatch } from '../../redux/store';\nimport { connect } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport styles from './scheduleitem.module.css';\nimport { RootState } from '../../redux/reducers';\nimport { getScheduleText } from '../../redux/app/selectors';\nimport Profile from '../profile';\nimport ButtonAction from '../buttonaction';\nimport cn from 'classnames';\nimport { retireSchedule, unretireSchedule, updateSelectedSchedule } from '../../redux/app/actions';\n\nexport interface ScheduleItemOwnProps {\n    schedule: ScheduleState;\n    isSelected: boolean;\n}\n\nexport interface ScheduleItemStateProps {\n  texts: ScheduleTextState;\n}\n\nexport interface ScheduleItemDispatchProps {\n  updateSelectedId: (id: number) => void;\n  retire: (id: number) => void;\n  unretire: (id: number) => void;\n}\n\nexport type ScheduleProps = ScheduleItemOwnProps & ScheduleItemStateProps & ScheduleItemDispatchProps;\n\nconst ScheduleItem: FC<ScheduleProps> = ({\n  schedule,\n  isSelected,\n  texts,\n  updateSelectedId,\n  retire,\n  unretire,\n }) => {\n  const handleButtonClick = (event): void => {\n    if (!schedule.isRetired) {\n      retire(schedule.id);\n    } else {\n      unretire(schedule.id);\n    }\n    event.stopPropagation();\n  };\n\n  return (\n  <div className={styles.container}>\n    <Card\n      data-test={`card_${schedule.id}`}\n      onClick={() => updateSelectedId(schedule.id)}\n      variant=\"outlined\"\n      className={cn({\n        [styles.active]: isSelected,\n      })}>\n      <CardContent className={styles.content}>\n        <div className={styles.header}>\n          <Profile letter={schedule.avatar.letter} color={schedule.avatar.color}/>\n          <Typography className={styles.title} color=\"textSecondary\" gutterBottom>\n            {schedule.name}\n          </Typography>\n        </div>\n        <Typography variant=\"body2\" component=\"p\">\n          {schedule.description}\n        </Typography>\n      </CardContent>\n      <CardActions className={styles.action}>\n        <ButtonAction\n          data-test={`action_${schedule.id}_retire`}\n          text={!schedule.isRetired ? texts.buttonRetireText : texts.buttonUnretireText}\n          type={!schedule.isRetired ? 'secondary' : 'primary'}\n          onClick={(event) => handleButtonClick(event)}\n        />\n      </CardActions>\n    </Card>\n  </div>);\n};\n\nconst mapDispatchToProps = (\n    dispatch: AppDispatch\n    ): ScheduleItemDispatchProps => ({\n      updateSelectedId: (id: number) => dispatch(updateSelectedSchedule(id)),\n      retire: (id: number) => dispatch(retireSchedule(id)),\n      unretire: (id: number) => dispatch(unretireSchedule(id)),\n});\n\nconst mapStateToProps = (state: RootState): ScheduleItemStateProps => ({\n  texts: getScheduleText(state),\n});\n\nexport default connect<ScheduleItemStateProps,ScheduleItemDispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(ScheduleItem);\n","import { FC } from 'react';\nimport { getSchedulesStatus, getSchedules, getScheduleText, getSelectedScheduleId } from '../../redux/app/selectors';\nimport { RootState } from '../../redux/reducers';\nimport { ScheduleState, ScheduleTextState, StatusState } from '../../redux/appState';\nimport { AppDispatch } from '../../redux/store';\nimport { connect } from 'react-redux';\nimport ScheduleItem from '../scheduleitem';\nimport styles from './schedules.module.css';\nimport Button from '@material-ui/core/Button';\nimport { getSchedulesAction } from '../../redux/app/actions';\n\nexport interface SchedulesOwnProps { }\n\nexport interface SchedulesStateProps {\n  status: StatusState,\n  schedules: ScheduleState[],\n  texts: ScheduleTextState;\n  selectedScheduleId: number;\n}\n\nexport interface SchedulesDispatchProps {\n  fetchSchedules: () => void;\n}\n\nexport type SchedulesProps = SchedulesOwnProps & SchedulesStateProps & SchedulesDispatchProps;\n\nconst Schedules: FC<SchedulesProps> = ({\n  status,\n  texts,\n  schedules,\n  selectedScheduleId,\n  fetchSchedules,\n }) => {\n  const isSuccessfull = status === StatusState.Success;\n  const isFailure = status === StatusState.Failure;\n\n  const hasItems = Array.isArray(schedules) && schedules.length > 0;\n\n  return (\n  <div className={styles.container}>\n\n      {isFailure && (\n        <div className={styles.info}>\n          <p>{texts.errorMessageText}</p>\n          <Button\n            onClick={() => fetchSchedules()}\n            variant=\"contained\"\n            color=\"primary\"\n            disableElevation>\n            {texts.buttonRetryText}\n          </Button>\n        </div>\n      )}\n\n      {isSuccessfull && !hasItems &&  (\n        <div className={styles.info}>\n          <p>{texts.emptyMessageText}</p>\n        </div>\n      )}\n\n      <div className={styles.items}>\n      {isSuccessfull && hasItems && (schedules.map(n => {\n        const isSelected = n.id === selectedScheduleId;\n        return <ScheduleItem key={n.id} schedule={n} isSelected={isSelected} />;\n      }))}\n      </div>\n    </div>);\n };\n\nconst mapStateToProps = (state: RootState): SchedulesStateProps => ({\n  status: getSchedulesStatus(state),\n  schedules: getSchedules(state),\n  texts: getScheduleText(state),\n  selectedScheduleId: getSelectedScheduleId(state),\n});\n\nconst mapDispatchToProps = (\n    dispatch: AppDispatch\n    ): SchedulesDispatchProps => ({\n  fetchSchedules: () => dispatch(getSchedulesAction()),\n});\n\nexport default connect<SchedulesStateProps, SchedulesDispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(Schedules);","import { FC } from 'react';\nimport styles from './time.module.css';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\n\nexport interface TimeProps {\n    label: string;\n    time: string;\n}\n\nconst Time: FC<TimeProps> = ({ label, time }) => (\n    <div>\n        <Typography\n            className={styles.label}\n            variant=\"overline\"\n            gutterBottom>\n            {label}\n        </Typography>\n        <div>\n            <Chip size=\"small\" label={time} />\n        </div>\n    </div>\n);\n\nexport default Time;","import { FC } from 'react';\nimport { LogTextState, ScheduleLogState } from '../../redux/appState';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport styles from './logitem.module.css';\nimport Time from '../time';\nimport dayjs from 'dayjs';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/reducers';\nimport { getLogText } from '../../redux/app/selectors';\n\nconst DAY_FORMATE = 'MMMM D YYYY';\nexport interface LogItemOwnProps {\n    item: ScheduleLogState;\n}\n\nexport interface LogItemStateProps {\n  texts: LogTextState;\n}\n\nexport type LogItemProps = LogItemOwnProps & LogItemStateProps;\n\nconst LogItem: FC<LogItemProps> = ({ item, texts }) => {\n    const startTimeFormatted  = dayjs(item.startTime.toString()).format(DAY_FORMATE);\n    const endTimeFormatted  = dayjs(item.endTime.toString()).format(DAY_FORMATE);\n    return (\n    <Card className={styles.logs} variant=\"outlined\">\n      <CardContent className={styles.content}>\n        <div className={styles.header}>\n          <Typography className={styles.title} noWrap={true} color=\"primary\" gutterBottom>\n            {item.serverName}\n          </Typography>\n          <Chip size=\"small\" label={item.status} />\n        </div>\n        <div className={styles.times}>\n            <Time label={texts.labelStartTime} time={startTimeFormatted} />\n            <Time label={texts.labelEndTime} time={endTimeFormatted} />\n        </div>\n      </CardContent>\n    </Card>\n    );\n};\n\nconst mapStateToProps = (state: RootState): LogItemStateProps => (\n  {\n    texts: getLogText(state),\n  }\n);\n\nexport default connect<LogItemStateProps>(\n  mapStateToProps,\n)(LogItem);","import { FC } from 'react';\nimport { getScheduleLogsStatus, getSelectedScheduleId, getScheduleLogs, getScheduleLogsText, getSchedules } from '../../redux/app/selectors';\nimport { RootState } from '../../redux/reducers';\nimport { ScheduleLogState, ScheduleLogsTextState, StatusState } from '../../redux/appState';\nimport { connect } from 'react-redux';\nimport LogItem from '../logitem';\nimport styles from './schedulelogs.module.css';\nimport { AppDispatch } from '../../redux/store';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { getScheduleLogsAction, resetSelectedSchedule } from '../../redux/app/actions';\n\nexport interface ScheduleLogsOwnProps { }\n\nexport interface ScheduleLogsStateProps {\n  isSelected: boolean;\n  scheduleName: string;\n  status: StatusState,\n  logs: ScheduleLogState[],\n  texts: ScheduleLogsTextState,\n}\n\nexport interface ScheduleLogsDispatchProps {\n  fetchScheduleLogs: () => void;\n  resetSelectedSchedule: () => void;\n}\n\nexport type ScheduleLogsProps = ScheduleLogsOwnProps & ScheduleLogsStateProps & ScheduleLogsDispatchProps;\n\nconst ScheduleLogs: FC<ScheduleLogsProps> = ({\n  isSelected,\n  scheduleName,\n  status,\n  logs,\n  texts,\n  fetchScheduleLogs,\n  resetSelectedSchedule,\n }) => {\n  const isSuccessfull = status === StatusState.Success;\n  const isFailure = status === StatusState.Failure;\n  const hasLogItems = Array.isArray(logs) && logs.length > 0;\n\n  return (\n  <>\n    {/* No Schedule Selected */}\n    {!isSelected && (<div className={styles.noinfo}>\n      <p>{texts.noSelectedScheduleText}</p>\n    </div>)}\n    {isSelected && (\n      <>\n        {/* Mobile overlay */}\n        <div className={styles.overlay} onClick={() => resetSelectedSchedule()} />\n        <div className={styles.schedulelogs}>\n          <>\n            {/* Mobile Title */}\n            <Typography className={styles.modalTitle} variant=\"h6\">{scheduleName}</Typography>\n            {/* FAILURE */}\n            {isFailure && (\n              <div className={styles.failure}>\n                <Typography className={styles.failureTitle} variant=\"body2\" component=\"p\">\n                  {texts.errorMessageText}\n                </Typography>\n                <Button\n                  className={styles.retryButton}\n                  onClick={() => fetchScheduleLogs()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disableElevation>\n                  {texts.buttonRetryText}\n                </Button>\n              </div>\n            )}\n            {/* SUCCESS WITHOUT DATA */}\n            {isSuccessfull && !hasLogItems &&  (\n              <div className={styles.emptySuccess}>\n                <p>{texts.emptyMessageText}</p>\n              </div>\n            )}\n            {/*  SUCCESS WITH DATA */}\n            {isSuccessfull && hasLogItems && (\n              <div className={styles.items}>\n                {logs.map(n => <LogItem key={n.id} item={n} />)}\n              </div>\n            )}\n          </>\n        </div>\n      </>\n  )}\n  </>);\n };\n\nconst mapStateToProps = (state: RootState): ScheduleLogsStateProps => {\n    const id = getSelectedScheduleId(state);\n    const schedules = getSchedules(state);\n    const logs = getScheduleLogs(state);\n    return {\n        isSelected: !!id,\n        scheduleName: !!id && !!schedules && schedules.find(n => n.id === id).name,\n        status: getScheduleLogsStatus(state),\n        logs: !!id && !!logs && logs.filter(n => n.scheduleId === id),\n        texts: getScheduleLogsText(state),\n    };\n};\n\nconst mapDispatchToProps = (\n  dispatch: AppDispatch\n  ): ScheduleLogsDispatchProps => ({\n    fetchScheduleLogs: () => dispatch(getScheduleLogsAction()),\n    resetSelectedSchedule: () => dispatch(resetSelectedSchedule()),\n});\n\nexport default connect<ScheduleLogsStateProps, ScheduleLogsDispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(ScheduleLogs);","import { Component } from 'react';\nimport { getHeaderTexts } from '../../redux/app/selectors';\nimport { RootState } from '../../redux/reducers';\nimport { connect } from 'react-redux';\nimport styles from './header.module.css';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { AppDispatch } from '../../redux/store';\nimport { searchSchedule } from '../../redux/app/actions';\n\nexport interface HeaderOwnProps { }\n\nexport interface HeaderStateProps {\n  title: string,\n}\n\nexport interface HeaderDispatchProps {\n  search: (criteria: string) => void,\n}\n\nconst ENTER_KEYCODE = 13;\n\ninterface HeaderState {\n  search: string;\n}\n\nexport type HeaderProps = HeaderOwnProps & HeaderStateProps & HeaderDispatchProps;\n\nclass Header extends Component<HeaderProps, HeaderState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: '',\n    };\n    this.handleOnChange.bind(this);\n    this.handleSearch.bind(this);\n  }\n\n  handleOnChange = (event) => {\n    this.setState({\n      ...this.state,\n      search: event.target.value,\n    });\n  }\n\n  handleSearch = (event) => {\n    switch(event.keyCode) {\n      case ENTER_KEYCODE:\n      {\n        const { search } = this.props;\n        search(this.state.search);\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleSearch);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleSearch);\n  }\n\n  render() {\n    const { title } = this.props;\n    return (\n      <div className={styles.container}>\n        <AppBar position=\"static\">\n          <Toolbar className={styles.bar}>\n            <Typography variant=\"h6\">{title}</Typography>\n            <div className={styles.search}>\n                <InputBase\n                  placeholder=\"Search…\"\n                  classes={{\n                    root: styles.inputRoot,\n                    input: styles.inputInput,\n                  }}\n                  inputProps={{ 'aria-label': 'search' }}\n                  onChange={this.handleOnChange}\n                />\n            </div>\n            <MenuIcon />\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): HeaderStateProps => ({\n    title: getHeaderTexts(state).titleText,\n});\n\nconst mapDispatchToProps = (\n  dispatch: AppDispatch\n): HeaderDispatchProps => ({\n  search: (criteria: string) => dispatch(searchSchedule(criteria)),\n});\n\nexport default connect<HeaderStateProps, HeaderDispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);","import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styles from './app.module.css';\r\nimport { RootState } from '../../redux/reducers';\r\nimport { AppDispatch } from '../../redux/store';\r\nimport { getSchedulesAction, getScheduleLogsAction } from '../../redux/app/actions';\r\nimport { getSchedulesStatus, getScheduleLogsStatus } from '../../redux/app/selectors';\r\nimport Schedules from '../schedules';\r\nimport ScheduleLogs from '../schedulelogs';\r\nimport Header from '../header';\r\nimport ReactLoading from 'react-loading';\r\nimport { StatusState } from '../../redux/appState';\r\n\r\nexport interface AppStateProps {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface AppDispatchProps {\r\n  bootApp: () => void;\r\n}\r\n\r\nexport type AppProps = AppStateProps & AppDispatchProps;\r\n\r\nconst App: FC<AppProps> = ({\r\n  isLoading,\r\n  bootApp,\r\n}) => {\r\n  /**\r\n   * Fetch schedules data when the component did mount\r\n   **/\r\n  useEffect(() => {\r\n    bootApp();\r\n  }, [bootApp]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n\r\n      <Header/>\r\n      {isLoading && (\r\n        <div className={styles.loading}>\r\n          <ReactLoading type='spin' color='#000000' height={50} width={50} />\r\n        </div>)}\r\n      {!isLoading && (<div className={styles.content}>\r\n        <Schedules />\r\n        <ScheduleLogs />\r\n      </div>)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): AppStateProps => ({\r\n  isLoading: getSchedulesStatus(state) === StatusState.Loading || getScheduleLogsStatus(state) === StatusState.Loading,\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: AppDispatch\r\n): AppDispatchProps => ({\r\n  bootApp: () => {\r\n    dispatch(getSchedulesAction());\r\n    dispatch(getScheduleLogsAction());\r\n  },\r\n});\r\n\r\nexport default connect<AppStateProps, AppDispatchProps>(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { configureStore } from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/app';\r\nimport { appInitialState } from './redux/initialState';\r\n\r\nconst store = configureStore(appInitialState);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"schedulelogs_items__Ztm2J\",\"overlay\":\"schedulelogs_overlay__21pnf\",\"modalTitle\":\"schedulelogs_modalTitle__1BBAU\",\"noinfo\":\"schedulelogs_noinfo__3e9X-\",\"schedulelogs\":\"schedulelogs_schedulelogs__3Jk_L\",\"modal\":\"schedulelogs_modal__3dBTM\",\"failure\":\"schedulelogs_failure__2qEdo\",\"failureTitle\":\"schedulelogs_failureTitle__3qJyG\",\"retryButton\":\"schedulelogs_retryButton__3MJTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"scheduleitem_container__3QC1I\",\"content\":\"scheduleitem_content__3eDFq\",\"action\":\"scheduleitem_action__1uegm\",\"active\":\"scheduleitem_active__3PCub\",\"header\":\"scheduleitem_header__1u8PB\",\"title\":\"scheduleitem_title__17wEh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logs\":\"logitem_logs__151Fk\",\"header\":\"logitem_header__1zTU6\",\"title\":\"logitem_title__mB9vE\",\"times\":\"logitem_times__117X6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"header_container__Qg6Mi\",\"bar\":\"header_bar__C74v7\",\"title\":\"header_title__1DXxp\",\"search\":\"header_search__130F1\",\"searchIcon\":\"header_searchIcon__1wMu3\",\"inputRoot\":\"header_inputRoot__1nlBX\",\"inputInput\":\"header_inputInput__3SkNf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"schedules_container__1qguG\",\"info\":\"schedules_info__1Fg60\",\"items\":\"schedules_items__30sV7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2GidD\",\"content\":\"app_content__1uD0k\",\"loading\":\"app_loading__20dLZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"orange\":\"profile_orange__2hFZM\",\"purple\":\"profile_purple__7YKZk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"time_label__2vA00\"};"],"sourceRoot":""}